{"version":3,"sources":["components/income.js","App.js","serviceWorker.js","index.js"],"names":["income","state","career","staticOrVariedIncome","monthlyIncome","incomeList","changeHandler","event","name","target","value","newState","setState","handleSubmit","preventDefault","axios","post","get","then","res","data","console","log","this","currencyComponents","map","i","key","onSubmit","type","placeholder","onChange","Component","App","className","exact","path","component","Income","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2TA4FeA,E,2MAtFXC,MAAQ,CACJC,OAAO,GACPC,qBAAqB,GACrBC,cAAc,GACdC,WAAW,I,EAGfC,cAAgB,SAACC,GACb,IAAMC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MAErBC,EAAQ,eAAO,EAAKV,OAC1BU,EAASH,GAAQE,EACjB,EAAKE,SAASD,I,EAGlBE,aAAe,SAACN,GACZA,EAAMO,iBACNC,IAAMC,KAAK,cAAe,EAAKf,Q,mFAGd,IAAD,OAChBc,IAAME,IAAI,eACTC,MAAK,SAACC,GACH,EAAKP,SAAS,CAACP,WAAYc,EAAIC,Y,+BAKnCC,QAAQC,IAAI,gBAAiBC,KAAKtB,OAElC,IAEMuB,EAFgBD,KAAKtB,MAAMI,WAEQoB,KAAI,SAACpB,EAAYqB,GACtD,OACI,yBAAKC,IAAKD,GACN,2BAAIrB,EAAWH,QACf,2BAAIG,EAAWF,sBACf,2BAAIE,EAAWD,mBAK3B,OACI,6BACKoB,EAED,0BAAMI,SAAUL,KAAKV,cACrB,2BACAL,KAAK,SACLqB,KAAK,OACLC,YAAY,SACZpB,MAAOa,KAAKtB,MAAMC,OAClB6B,SAAUR,KAAKjB,gBAEf,6BACA,2BACAE,KAAK,uBACLqB,KAAK,UACLC,YAAY,mBACZpB,MAAOa,KAAKtB,MAAME,qBAClB4B,SAAUR,KAAKjB,gBAEf,6BACA,2BACAE,KAAK,gBACLqB,KAAK,SACLC,YAAY,iBACZpB,MAAOa,KAAKtB,MAAMG,cAClB2B,SAAUR,KAAKjB,gBAEf,6BACA,2BACAuB,KAAK,SACLnB,MAAM,iB,GA5EDsB,aCaNC,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,QCEvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.c06dbdfc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from 'axios';\n\nclass income extends Component {\n\n    state = {\n        career:'',\n        staticOrVariedIncome:'',\n        monthlyIncome:'',\n        incomeList:[]\n    }\n\n    changeHandler = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        const newState = {...this.state}\n        newState[name] = value;\n        this.setState(newState)\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        axios.post('/api/income', this.state)\n    }\n\n    componentDidMount() {\n        axios.get('/api/income')\n        .then((res) => {\n            this.setState({incomeList: res.data})\n        })\n    }\n\n    render(){\n        console.log('From render()', this.state)\n\n        const newIncomeList = this.state.incomeList;\n\n        const currencyComponents = newIncomeList.map((incomeList, i) => {\n            return(\n                <div key={i}>\n                    <p>{incomeList.career}</p>\n                    <p>{incomeList.staticOrVariedIncome}</p>\n                    <p>{incomeList.monthlyIncome}</p>\n                </div>\n            )\n        })\n\n        return(\n            <div>\n                {currencyComponents}\n\n                <form onSubmit={this.handleSubmit}>\n                <input\n                name=\"career\"\n                type=\"text\"\n                placeholder=\"Career\"\n                value={this.state.career}\n                onChange={this.changeHandler}\n                />\n                <br></br>\n                <input\n                name=\"staticOrVariedIncome\"\n                type=\"boolean\"\n                placeholder=\"Static or Varied\"\n                value={this.state.staticOrVariedIncome}\n                onChange={this.changeHandler}\n                />\n                <br></br>\n                <input\n                name=\"monthlyIncome\"\n                type=\"number\"\n                placeholder=\"Monthly Income\"\n                value={this.state.monthlyIncome}\n                onChange={this.changeHandler}\n                />\n                <br></br>\n                <input\n                type=\"submit\"\n                value=\"Submit\"\n                />\n                </form>\n\n\n\n            </div>\n        )\n    }\n\n}\n\nexport default income","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Income from './components/income.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Income}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}